# generate_cache_init.py

# --- Configuration ---
# These values must match the #defines in your C++ code
RECORD_GROUP_NUM = 10
VERIFY_GROUP_NUM = 81
OUTPUT_FILENAME = "cache_init.inc"


def generate_cpp_code():
    """
    Generates the C++ code by expanding the array initializers.
    """

    # The initializer for a single element in the map_groups array
    element_initializer = "{._ctrl = _mm_set1_epi8(HM_EMPTY1B)}"

    # Generate the full, comma-separated initializer list for record_cache
    record_cache_list = ",\n        ".join([element_initializer] * RECORD_GROUP_NUM)

    # Generate the full, comma-separated initializer list for verify_cache
    verify_cache_list = ",\n        ".join([element_initializer] * VERIFY_GROUP_NUM)

    # Use an f-string as a template for the final C++ code
    cpp_template = f"""
// This file is auto-generated by generate_cache_init.py. DO NOT EDIT.

//-----------------------Begin: Define global variables-----------------------------------
static hm_recordcache_layout_t record_cache __attribute__((aligned(PAGE_SIZE))) = {{
    .hashmap = {{
        .metainfo = {{HM_TYPE_RECORD, 0, 0, MAP_MIGRATE_MIN_FREQ + 1}},
        .items = 0,
        .size = RECORD_GROUP_NUM * HM_GROUP_SIZE,
        .n_groups = RECORD_GROUP_NUM,
        .sentinel = 0,
    }},
    .map_groups = {{
        {record_cache_list}
    }},
}};

static hm_verifycache_layout_t verify_cache __attribute__((aligned(PAGE_SIZE))) = {{
    .hashmap = {{
        .metainfo = {{HM_TYPE_VERIFY, 1, 0, 0}},
        .items = 0,
        .size = VERIFY_GROUP_NUM * HM_GROUP_SIZE,
        .n_groups = VERIFY_GROUP_NUM,
        .sentinel = 0,
    }},
    .map_groups = {{
        {verify_cache_list}
    }},
}};
//-------------------------End: Define global variables-----------------------------------
"""

    # Write the generated code to the output file
    with open(OUTPUT_FILENAME, "w", encoding="utf-8") as f:
        f.write(cpp_template)

    print(f"Successfully generated C++ code in '{OUTPUT_FILENAME}'.")


if __name__ == "__main__":
    generate_cpp_code()
